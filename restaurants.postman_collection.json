{
	"info": {
		"_postman_id": "0212527d-137c-4962-8d51-70ed829cfdcc",
		"name": "ModuleTwo â€“ Restaurants",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46556980",
		"_collection_link": "https://amoy-1475489.postman.co/workspace/Amoy's-Workspace~3af5ef69-e4cf-44d5-86e5-5d726d55bf9a/collection/46556980-0212527d-137c-4962-8d51-70ed829cfdcc?action=share&source=collection_link&creator=46556980"
	},
	"item": [
		{
			"name": "POST / restaurants",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Status 201 Created",
							"pm.test(\"Status code is 201\", () => {",
							"  pm.response.to.have.status(201);",
							"});",
							"",
							"// 2) Response has an _id",
							"pm.test(\"Response has _id\", () => {",
							"  const body = pm.response.json();",
							"  pm.expect(body).to.have.property(\"_id\");",
							"});",
							"",
							"// 3) Name matches what we sent",
							"pm.test(\"Name is Test Cafe\", () => {",
							"  const body = pm.response.json();",
							"  pm.expect(body.name).to.eql(\"Test Cafe\");",
							"});",
							"",
							"// Save the new ID for later requests",
							"pm.collectionVariables.set(\"restId\", pm.response.json()._id);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Test Cafe\",\n  \"address\": \"123 Main St\",\n  \"phone\": \"555-1234\",\n  \"isOpen\": true\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/restaurants",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"restaurants"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET / restaurants",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Returns 200 OK",
							"pm.test(\"Status code is 200\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"// 2) Body is an array",
							"pm.test(\"Body is an array\", () => {",
							"  const body = pm.response.json();",
							"  pm.expect(body).to.be.an(\"array\");",
							"});",
							"",
							"// 3) Items have name & address",
							"pm.test(\"Each item has name & address\", () => {",
							"  pm.response.json().forEach(item => {",
							"    pm.expect(item).to.have.property(\"name\");",
							"    pm.expect(item).to.have.property(\"address\");",
							"  });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/restaurants",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"restaurants"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET / restaurants/:id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Returns 200 OK",
							"pm.test(\"Status code is 200\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"// 2) ID matches what we saved",
							"pm.test(\"ID matches variable\", () => {",
							"  const body = pm.response.json();",
							"  pm.expect(body._id).to.eql(pm.collectionVariables.get(\"restId\"));",
							"});",
							"",
							"// 3) Has all required fields",
							"pm.test(\"Has name, address, isOpen\", () => {",
							"  const { name, address, isOpen } = pm.response.json();",
							"  pm.expect(name).to.be.a(\"string\");",
							"  pm.expect(address).to.be.a(\"string\");",
							"  pm.expect(isOpen).to.be.a(\"boolean\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/restaurants/{{restId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"restaurants",
						"{{restId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT / restaurants/:id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Returns 200 OK",
							"pm.test(\"Status code is 200\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"// 2) Phone was updated",
							"pm.test(\"Phone updated\", () => {",
							"  pm.expect(pm.response.json().phone).to.eql(\"555-9999\");",
							"});",
							"",
							"// 3) createdAt stays a valid date",
							"pm.test(\"createdAt is a date\", () => {",
							"  const createdAt = pm.response.json().createdAt;",
							"  pm.expect(new Date(createdAt)).to.be.a(\"date\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"phone\": \"555-9999\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/restaurants/{{restId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"restaurants",
						"{{restId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE / restaurants/:id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Returns 200 OK",
							"pm.test(\"Status code is 200\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"// 2) Message confirms deletion",
							"pm.test(\"Correct deletion message\", () => {",
							"  pm.expect(pm.response.json().message).to.eql(\"Deleted successfully\");",
							"});",
							"",
							"// 3) Subsequent GET returns 404",
							"pm.sendRequest({",
							"  url: `${pm.environment.get(\"base_url\")}/restaurants/${pm.collectionVariables.get(\"restId\")}`,",
							"  method: \"GET\"",
							"}, (err, res) => {",
							"  pm.test(\"GET after delete yields 404\", () => {",
							"    pm.expect(res).to.have.status(404);",
							"  });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/restaurants/{{restId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"restaurants",
						"{{restId}}"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "restId",
			"value": ""
		}
	]
}